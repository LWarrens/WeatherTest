import pandas


def wind_chill_index(temperature, velocity):
    ''' takes a Fahrenheit temperature and wind velocity to return the calculated wind chill index'''
    return 35.74 + 0.6215 * temperature - 35.75 * velocity ** .16 + .4275 * velocity ** .16

def get_wind_chill(mask_function, date, dataset):
    ''' 
    Takes a mask function that returns a boolean value for filtering, a date, and a dataset as its arguments. 
    It returns the wind chill in Fahrenheit.
    takes 
    Keyword arguments:
        mask_function -- a lambda function used to filter dry bulb temperature in Fahrenheit.
            This function should be true if the given dry bulb temperature for an entry should be considered for the calculation. 
        date -- date string the windchill index will be evaluated for
        dataset -- relative filepath of the dataset the windchill will be extracted from
    '''
    # the csv is read by the pandas library into a pandas dataframe
    data = pandas.read_csv(dataset)
    # midday and noon times are constructed for the given date
    day_begin = pandas.Timestamp(date).replace(hour=0, minute=0, second=0, microsecond=0)
    day_end = day_begin + pandas.DateOffset(days=1)
    # a mask is created to filter the dataset
    data["DATE"] = pandas.to_datetime(data["DATE"])
    #ensure necessary values exist
    nullmask = pandas.notnull(data["DATE"]) & pandas.notnull(data["HOURLYDRYBULBTEMPF"]) & pandas.notnull(data["HOURLYWindSpeed"])

    mask = (day_begin <= data["DATE"]) & (data["DATE"] < day_end) & nullmask
    days_data = data[mask]

    days_data = days_data[mask_function(pandas.to_numeric(days_data["HOURLYDRYBULBTEMPF"]))]
    # calculate windchill for all entries in the dataframe then find the mean for all entries
    # note: the function calculates windchill for each individual measurement,
    # not the mean temperature and mean windspeeds for the day
    if not days_data.empty:
        windspeeds = pandas.to_numeric(days_data["HOURLYWindSpeed"], errors='coerce')
        temperatures = pandas.to_numeric(days_data["HOURLYDRYBULBTEMPF"], errors='coerce')
        return wind_chill_index(temperatures, windspeeds).mean(skipna=True)
    return None

def get_similarity_index(drybulb_a, wetbulb_a, dewpoint_a, altimeter_a, windspeed_a, drybulb_b, wetbulb_b, dewpoint_b, altimeter_b, windspeed_b) :
    '''
        Takes in the Fahrenheit temperature values and wind speed for two datasets 
    
    :return: the value of the similarity index as generated by a Euclidian distance function over the input parameters
    '''
    windchill_diff = wind_chill_index(drybulb_a, windspeed_a) - wind_chill_index(drybulb_b, windspeed_b)
    return (windchill_diff**2 + (drybulb_a-drybulb_b)**2 + (wetbulb_a-wetbulb_b)**2
            + (dewpoint_a - dewpoint_b)**2 + (altimeter_a-altimeter_b)**2)**.5